{"version":3,"sources":["logo.svg","Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","CELL_SIZE","WIDTH","HEIGHT","Cell","_this$props","this","props","x","y","react_default","a","createElement","className","style","left","concat","top","width","height","React","Component","Game","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","cells","isRunning","interval","handleClick","event","elemOffset","getElementOffset","offsetX","clientX","offsetY","clientY","Math","floor","cols","rows","board","setState","makeCells","runGame","runIteration","stopGame","timeoutHandler","window","clearTimeout","handleIntervalChange","target","value","handleClear","makeEmptyBoard","handleRandom","random","rect","boardRef","getBoundingClientRect","doc","document","documentElement","pageXOffset","clientLeft","pageYOffset","clientTop","push","_this2","newBoard","neighbors","calculateNeighbors","setTimeout","dirs","i","length","dir","y1","x1","_this3","_this$state","backgroundSize","onClick","ref","n","map","cell","Game_Cell","key","onChange","App","src_Game_0","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fee824a8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport './Game.css';\n\n\nconst CELL_SIZE = 20;\nconst WIDTH = 800;\nconst HEIGHT = 600;\n\n\nclass Cell extends React.Component {\n\n    render() {\n        const { x, y } = this.props;\n        return (\n            <div className=\"Cell\" style={{\n                left: `${CELL_SIZE * x + 1}px`,\n                top: `${CELL_SIZE * y + 1}px`,\n                width: `${CELL_SIZE - 1}px`,\n                height: `${CELL_SIZE - 1}px`,\n            }} />\n        );\n    }\n}\n\n\nclass Game extends React.Component {\n\n    constructor() {\n        super();\n        this.rows = HEIGHT / CELL_SIZE;\n        this.cols = WIDTH / CELL_SIZE;\n\n        this.board = this.makeEmptyBoard();\n    }\n\n    state = {\n        cells: [],\n        isRunning: false,\n        interval: 100,\n    }\n\n    makeEmptyBoard() {\n        let board = [];\n        for (let y = 0; y < this.rows; y++) {\n            board[y] = [];\n            for (let x = 0; x < this.cols; x++) {\n                board[y][x] = false;\n            }\n        }\n\n        return board;\n    }\n\n    getElementOffset() {\n        const rect = this.boardRef.getBoundingClientRect();\n        const doc = document.documentElement;\n\n        return {\n            x: (rect.left + window.pageXOffset) - doc.clientLeft,\n            y: (rect.top + window.pageYOffset) - doc.clientTop,\n        };\n    }\n\n    makeCells() {\n        let cells = [];\n        for (let y = 0; y < this.rows; y++) {\n            for (let x = 0; x < this.cols; x++) {\n                if (this.board[y][x]) {\n                    cells.push({ x, y });\n                }\n            }\n        }\n\n        return cells;\n    }\n\n    handleClick = (event) => {\n\n        const elemOffset = this.getElementOffset();\n        const offsetX = event.clientX - elemOffset.x;\n        const offsetY = event.clientY - elemOffset.y;\n        \n        const x = Math.floor(offsetX / CELL_SIZE);\n        const y = Math.floor(offsetY / CELL_SIZE);\n\n        if (x >= 0 && x <= this.cols && y >= 0 && y <= this.rows) {\n            this.board[y][x] = !this.board[y][x];\n        }\n\n        this.setState({ cells: this.makeCells() });\n    }\n\n    runGame = () => {\n        this.setState({ isRunning: true });\n        this.runIteration();\n    }\n\n    stopGame = () => {\n        this.setState({ isRunning: false });\n        if (this.timeoutHandler) {\n            window.clearTimeout(this.timeoutHandler);\n            this.timeoutHandler = null;\n        }\n    }\n\n    runIteration() {\n        let newBoard = this.makeEmptyBoard();\n\n        for (let y = 0; y < this.rows; y++) {\n            for (let x = 0; x < this.cols; x++) {\n                let neighbors = this.calculateNeighbors(this.board, x, y);\n                if (this.board[y][x]) {\n                    if (neighbors === 2 || neighbors === 3) {\n                        newBoard[y][x] = true;\n                    } else {\n                        newBoard[y][x] = false;\n                    }\n                } else {\n                    if (!this.board[y][x] && neighbors === 3) {\n                        newBoard[y][x] = true;\n                    }\n                }\n            }\n        }\n\n        this.board = newBoard;\n        this.setState({ cells: this.makeCells() });\n\n        this.timeoutHandler = window.setTimeout(() => {\n            this.runIteration();\n        }, this.state.interval);\n    }\n\n    /**\n     * Calculate the number of neighbors at point (x, y)\n     * @param {Array} board \n     * @param {int} x \n     * @param {int} y \n     */\n    calculateNeighbors(board, x, y) {\n        let neighbors = 0;\n        const dirs = [[-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1], [0, -1]];\n        for (let i = 0; i < dirs.length; i++) {\n            const dir = dirs[i];\n            let y1 = y + dir[0];\n            let x1 = x + dir[1];\n\n            if (x1 >= 0 && x1 < this.cols && y1 >= 0 && y1 < this.rows && board[y1][x1]) {\n                neighbors++;\n            }\n        }\n\n        return neighbors;\n    }\n\n    handleIntervalChange = (event) => {\n        this.setState({ interval: event.target.value });\n    }\n\n    handleClear = () => {\n        this.board = this.makeEmptyBoard();\n        this.setState({ cells: this.makeCells() });\n    }\n\n    handleRandom = () => {\n        for (let y = 0; y < this.rows; y++) {\n            for (let x = 0; x < this.cols; x++) {\n                this.board[y][x] = (Math.random() >= 0.5);\n            }\n        }\n\n        this.setState({ cells: this.makeCells() });\n    }\n\n    render() {\n        const { cells, interval, isRunning } = this.state;\n        return (\n            <div>\n                <div className=\"Board\"\n                    style={{ width: WIDTH, height: HEIGHT, backgroundSize: `${CELL_SIZE}px ${CELL_SIZE}px`}}\n                    onClick={this.handleClick}\n                    ref={(n) => { this.boardRef = n; }}>\n\n                    {cells.map(cell => (\n                        <Cell x={cell.x} y={cell.y} key={`${cell.x},${cell.y}`}/>\n                    ))}\n                </div>\n\n                <div className=\"controls\">\n                    Update every <input value={this.state.interval} onChange={this.handleIntervalChange} /> msec\n                    {isRunning ?\n                        <button className=\"button\" onClick={this.stopGame}>Stop</button> :\n                        <button className=\"button\" onClick={this.runGame}>Run</button>\n                    }\n                    <button className=\"button\" onClick={this.handleRandom}>Random</button>\n                    <button className=\"button\" onClick={this.handleClear}>Clear</button>\n                </div>\n            </div>\n        );\n    }\n}\n\n\nexport default Game;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Game from './Game'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n      <Game />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}